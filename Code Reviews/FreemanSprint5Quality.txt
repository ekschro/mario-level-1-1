William Freeman (.694)
7/17/18
Sprint 5
TestBigMarioStateMachine.cs
Dorothy Chow and Tim Regrut

The TestBigMarioStateMachine class (besides being quite a mouthful) does somewhat as it suggests. It is the state machine for Mario's Big state (not sure where the "Test" came from). This nesting of states and state machines drastically cuts down on the potential number of states to manage and allows the classes to be broken down into more managable chunks, this being one of them. The class is 150 lines long, which is a borderline code smell, being just a little too long to remain cohesive. One problem that this class has is the lack of an AbstractTestMarioStateMachine. Lines 69 - 150 are completely identical to lines found in the other state machine classes. By putting these into an abstract class, it would avoid duplication of code and allow the class itself to focus on what it does differently from the other state machines, which is selecting the specific frames to be used by the Sprite class. This is somewhat odd of a task to be delegated to the state machine, especially since the sprite classes are essentially empty, only filling a vague gap in the Abstract sprite class. However, it does make use of all of Mario's potential states to determine what frames will be used, so it could be argued that this trades some internal cohesion for better external coupling. Speaking of, this class has fairly low coupling with only dependencies on the sprite class and its own utility class. Overall, the class is long, crowded, and has moderately low cohesion, but has low coupling and a fairly quick fix in terms of an Abstract class.