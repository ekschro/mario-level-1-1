William Freeman (.694)
6/5/18
Sprint 2
KoopaSprite.cs
Dorothy Chow

Starting from the top, all fields are in camelCase, but there may be too many. 11 fields can result in some confusing code that may be better spread out over several classes. Additionally, making these fields into properties will increase the maintainability of the code by decreasing coupling. 
The constructor is straightforward, assigning some magic numbers and setting up the fields to be used in this class. 
ChangeDirection and BeFlipped simply call the state machine's respective function, which is proper to do in this design pattern.
BeStomped assignes several magic numbers in a way that is unclear as to what is actually changing. This sort of implementation is not maintainable and inherently lowers cohesion by conglomerating these unexplained statements together.
The Update method has a slightly concerning cyclomatic complexity and uses more magic numbers. Given the large number of fields to manage in this class, however, the former may be neccessary to perform properly.
The Draw method has a direct dependency on the Game class, using the koopaTexture and spriteBatch by way of the reference passed in the constructor.
Throughout, the class is very tightly coupled with its state machine, but again, for this design pattern, that is to be expected.

A major change to this sort of file would be to spread out the workload of this class across several classes. Instead of having to hardcode the looping animation logic into every class (including this one), a single helper class could be used. This would reduce the number of fields, decrease the amount of repeated code, eliminate the need for the magic numbers, and may actually reduce the number of dependencies throughout the entire project by funneling them through the helper class. Some alterations to the client code may be neccessary (mainly in the parameters passed) in addition to removing the blocks, but it would ultimately be less work than attempting to modify each class later on.